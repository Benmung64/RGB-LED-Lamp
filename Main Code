#include <FastLED.h>

#define DATA_PIN    0
#define LED_TYPE    WS2812B
#define COLOR_ORDER GRB
#define NUM_LEDS    50
bool autoPattern = true;
bool autoPalette = true;
CRGB leds[NUM_LEDS];

#define BRIGHTNESS         135
#define FRAMES_PER_SECOND  150
#define PB1  1
#define PB2  3
#define paletteNumber 13

DEFINE_GRADIENT_PALETTE (spaceAge){
        0,   14,  0, 255,
       71,   9,   9, 121,
      125,   1, 196, 244,
      181, 255,   0, 236,
      255,  14,   0, 255
    };
DEFINE_GRADIENT_PALETTE (sunset){
        0, 255,  24,   2,
      102, 245, 234,   1,
      150, 168,   1, 244,
      196,   3, 161, 249,
      255, 255,  24,   2
    };
DEFINE_GRADIENT_PALETTE (candleLight){
       0, 250, 158,  59,
      54, 252, 200,  27,
     128, 249, 224,  52,
     209, 252, 193,  27,
     255, 250, 158,  59,
    };
DEFINE_GRADIENT_PALETTE (slime){
        0,  95, 250,  59,
       69, 249, 237,  52,
      133,  52, 243, 106,
      181, 255, 238,  58,
      255,  95, 250,  59,
    };
DEFINE_GRADIENT_PALETTE (sherbert){
        0, 241,   0,   0,
       64,  48,   0, 242,
      128,  63, 241,   0,
      191, 193,   0, 240,
      255, 241,   0,   0,
    };
DEFINE_GRADIENT_PALETTE (redFlame){
        0, 255,   0,   0,
       64, 227,  108, 106,
      128, 255,    0,   0,
      191, 227,  108, 106,
      255, 255,   0,   0,
    };
DEFINE_GRADIENT_PALETTE (greenFlame){
        0,   0,  255,   0,
       64, 150,  238, 145,
      128,   0,  255,   0,
      191, 150,  238, 145,
      255,   0,  255,   0,
    };
DEFINE_GRADIENT_PALETTE (blueFlame){
        0,   0,    0, 255,
       64, 174,  174, 245,
      128,   0,    0, 255,
      191, 174,  174, 245,
      255,   0,    0, 255,
    };
DEFINE_GRADIENT_PALETTE (yellowFlame){
        0, 255,  248,   0,
       64, 245,  241, 174,
      128, 255,  248,   0,
      191, 245,  241, 174,
      255, 255,  248,   0,
    };
DEFINE_GRADIENT_PALETTE (orangeFlame){
        0, 255,  164,   0,
       64, 249,  195,  97,
      128, 255,  164,   0,
      191, 249,  195,  97,
      255, 255,  164,   0,
    };
DEFINE_GRADIENT_PALETTE (cyanFlame){
        0,   0,  255, 248,
       64, 169,  246, 245,
      128,   0,  255, 248,
      191, 169,  246, 245,
      255,   0,  255, 248,
    };
DEFINE_GRADIENT_PALETTE (purpleFlame){
        0, 201,    0, 254,
       64, 232,  169, 246,
      128, 201,    0, 254,
      191, 232,  169, 246,
      255, 201,    0, 254,
    };
DEFINE_GRADIENT_PALETTE (magentaFlame){
        0, 255,    0, 246,
       64, 246,  169, 229,
      128, 255,    0, 246,
      191, 246,  169, 229,
      255, 255,    0, 246,
    };



CRGBPalette16 Pal;
 
void setup() {
  pinMode(PB1, INPUT_PULLUP);
  pinMode(PB2, INPUT_PULLUP);
  
  FastLED.addLeds<LED_TYPE,DATA_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
  FastLED.setMaxPowerInVoltsAndMilliamps(5,300);
  FastLED.setBrightness(BRIGHTNESS);
  FastLED.clear();
  FastLED.show();
  delay(1000);
  
  Pal = RainbowColors_p;
  //  currentBlending = LINEARBLEND;
}

void fade();
void confetti();
void solid();
void stripe();
void fastStripe();
void sinPattern();
void sinPattern2();
void sinPattern3();
void pulse();
void sparks();

typedef void (*patternList[])();
patternList gPatterns = { fade, confetti, solid, stripe, fastStripe, chase, sinPattern, sinPattern2, sinPattern3, pulse, sparks};
uint8_t patternIndex = 0;
uint8_t paletteIndex = 0;
uint8_t colourIndex = 0;

void loop() {
  EVERY_N_MILLISECONDS( 40 ) { colourIndex++; }
  gPatterns[patternIndex]();
  //fade();
  FastLED.show();
  FastLED.delay(1000/FRAMES_PER_SECOND); 
  
  if(paletteIndex == 0){Pal = RainbowColors_p;}
  if(paletteIndex == 1){Pal = spaceAge;}
  if(paletteIndex == 2){Pal = sunset;}
  if(paletteIndex == 3){Pal = candleLight;}
  if(paletteIndex == 4){Pal = slime;}
  if(paletteIndex == 5){Pal = sherbert;}
  
  if(paletteIndex == 6){Pal = redFlame;}
  if(paletteIndex == 7){Pal = greenFlame;}
  if(paletteIndex == 8){Pal = blueFlame;}
  if(paletteIndex == 9){Pal = yellowFlame;}
  if(paletteIndex == 10){Pal = orangeFlame;}
  if(paletteIndex == 11){Pal = cyanFlame;}
  if(paletteIndex == 12){Pal = purpleFlame;}
  if(paletteIndex == 13){Pal = magentaFlame;}

  
  if (autoPattern == true){
     EVERY_N_SECONDS(15) {patternIndex++;}
     if (patternIndex > 10){
        patternIndex = 0;
     }
  }
  
  if (autoPalette == true ){
    EVERY_N_SECONDS(35) {paletteIndex++;}
    if (paletteIndex > paletteNumber){
    paletteIndex = 0;
  }
  }
  
        
  if(digitalRead(PB1) == LOW){      
    if (autoPalette == true){
       for( uint8_t i = 0; i < NUM_LEDS; ++i) {
        leds[i] = CRGB::Red;       
       }
       FastLED.delay(500);
    }
    
    if(paletteIndex < paletteNumber and autoPalette == false){
      paletteIndex++;      
    }else if (paletteIndex >= paletteNumber){
      paletteIndex = 0;
    }
    autoPalette = false;
    while(digitalRead(PB1) == LOW);
  }
  
  if(digitalRead(PB2) == LOW){
     if (autoPattern == true){
       for( uint8_t i = 0; i < NUM_LEDS; ++i) {
        leds[i] = CRGB::Red;       
       }
       FastLED.delay(500);
    }

    
    if(patternIndex < 10 and autoPattern == false){
      patternIndex++;
           
    }else if (patternIndex >= 10) {
      patternIndex = 0;
    }
    autoPattern = false;
    while(digitalRead(PB2) == LOW);
    
    
    }

}

void fade(){  
  uint8_t index = colourIndex;
    for( uint8_t i = 0; i < NUM_LEDS; ++i) {
        leds[i] = ColorFromPalette( Pal, index, BRIGHTNESS, LINEARBLEND);
        index += 3;
             
    }
}
void confetti() 
{
  fadeToBlackBy( leds, NUM_LEDS, 10);
  uint16_t pos = random8(NUM_LEDS);
  leds[pos] += ColorFromPalette (Pal, colourIndex + random8(64), BRIGHTNESS, NOBLEND );
  //leds[pos] += CHSV( colourIndex + random8(64), 200, 255);
}

void solid(){
  //uint8_t index = colourIndex;
    for( uint8_t i = 0; i < NUM_LEDS; ++i) {
        leds[i] = ColorFromPalette( Pal, colourIndex, BRIGHTNESS, LINEARBLEND);
             
    }
}

void stripe(){
  //uint8_t index = colourIndex;
  uint8_t pos = map(beat8(30,0), 0, 255, 0, NUM_LEDS-1);
  leds[pos] = ColorFromPalette( Pal, colourIndex, BRIGHTNESS, LINEARBLEND);
  fadeToBlackBy(leds, NUM_LEDS, 3); 
}

void fastStripe(){
  //uint8_t index = colourIndex;
  uint8_t pos = map(beat8(80,0), 0, 255, 0, NUM_LEDS-1);
  leds[pos] = ColorFromPalette( Pal, colourIndex, BRIGHTNESS, LINEARBLEND);
  fadeToBlackBy(leds, NUM_LEDS, 10); 
}


void chase(){
  uint8_t pos = map(beat8(40,0), 0, 255, 0, NUM_LEDS-1);
  uint8_t pos2 = map(beat8(40, 0), 0, 255, 0, NUM_LEDS-1)+ 25;
  if (pos2 > (NUM_LEDS-1)){
    pos2 = pos2 - (NUM_LEDS-1);
    
  }
  leds[pos] = ColorFromPalette( Pal, colourIndex, BRIGHTNESS, LINEARBLEND);
  leds[pos2] = ColorFromPalette( Pal, colourIndex + 127, BRIGHTNESS, LINEARBLEND);
  fadeToBlackBy(leds, NUM_LEDS, 9); 
}

void sinPattern(){
  //uint8_t index = colourIndex;
  uint8_t pos = beatsin8(30, 0, NUM_LEDS-1, 0, 0);
  leds[pos] = ColorFromPalette( Pal, colourIndex, BRIGHTNESS, LINEARBLEND);
  fadeToBlackBy(leds, NUM_LEDS, 3); 
}

void sinPattern2(){
  //uint8_t index = colourIndex;
  uint8_t pos = beatsin8(20, 0, NUM_LEDS-1, 0, 0);
  uint8_t pos2 = beatsin8(20, 0, NUM_LEDS-1, 0, 127);
  leds[pos] = ColorFromPalette( Pal, colourIndex, BRIGHTNESS, LINEARBLEND);
  leds[pos2] = ColorFromPalette( Pal, colourIndex+127, BRIGHTNESS, LINEARBLEND);
  fadeToBlackBy(leds, NUM_LEDS, 6); 
}

void sinPattern3(){
  uint8_t pos = beatsin8(15, 0, NUM_LEDS-1, 0, 0);
  uint8_t pos2 = beatsin8(15, 0, NUM_LEDS-1, 0, 85);
  uint8_t pos3 = beatsin8(15, 0, NUM_LEDS-1, 0, 127);
  leds[pos] = ColorFromPalette( Pal, colourIndex, BRIGHTNESS, LINEARBLEND);
  leds[pos2] = ColorFromPalette( Pal, colourIndex+64, BRIGHTNESS, LINEARBLEND);
  leds[pos3] = ColorFromPalette( Pal, colourIndex+175, BRIGHTNESS, LINEARBLEND);
  fadeToBlackBy(leds, NUM_LEDS, 10); 
}

void pulse(){
  uint8_t index = colourIndex;
  uint8_t bright = beatsin8(15, 0, BRIGHTNESS, 0, 0);
    for( uint8_t i = 0; i < NUM_LEDS; ++i) {
        leds[i] = ColorFromPalette( Pal,index, bright, LINEARBLEND);
        index += 3;
        }
}

void sparks(){
  uint8_t pos = map(beat8(20,0), 0, 255, 0, NUM_LEDS-1);
  leds[pos] = ColorFromPalette( Pal, colourIndex, random8(BRIGHTNESS), LINEARBLEND);
  fadeToBlackBy(leds, NUM_LEDS, 1);
}
